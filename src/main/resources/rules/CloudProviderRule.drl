package org.indigo.cloudproviderruleengine;
 
import org.indigo.cloudproviderruleengine.PaaSMetricRanked;
import org.indigo.cloudproviderruleengine.Sla;
import org.indigo.cloudproviderruleengine.Target;

// rule "VEPHDISK"
// 	when
// 		$cp : CloudProvider( inUseVEPHDISK < totalVEPHDISK )
// 	then
// 		$cp.addToTotalRank( ((float)($cp.getTotalVEPHDISK() - $cp.getInUseVEPHDISK())) /((float) $cp.getTotalVEPHDISK()) );
// end
// 
// rule "VDISK"
// 	when
// 		$cp : CloudProvider( inUseVDISK < totalVDISK )
// 	then
// 		$cp.addToTotalRank( ((float)($cp.getTotalVDISK() - $cp.getInUseVDISK())) /((float) $cp.getTotalVDISK()) );
// end
// 
// rule "VCPU"
//     when
//         $cp : CloudProvider( inUseVCPU < totalVCPU )
//     then
//         $cp.addToTotalRank( ((float)($cp.getTotalVCPU() - $cp.getInUseVCPU()))/((float)$cp.getTotalVCPU()) );
// end
// 
// rule "VRAM"
// 	when 
// 		$cp : CloudProvider( inUseVRAM < totalVRAM )
// 	then
// 		$cp.addToTotalRank( ((float)($cp.getTotalVRAM()-$cp.getInUseVRAM()))/((float)$cp.getTotalVRAM()) );
// end
// 
// rule "ZERO"
//     when
// 	$cp : CloudProvider( inUseVCPU >= totalVCPU || inUseVRAM >= totalVRAM || inUseVEPHDISK >= totalVEPHDISK || inUseVDISK >= totalVDISK  )
//     then
// 	$cp.zeroRank( );
// end


//rule "SLA_rank_public_ip"
//  when
//    $sla : Sla( $sla.total_limit < Double.INFINITY
//  then
//
//end

// For the moment the Rule is trivial. It'll be enhanced later
//rule "PAASMETRIC"
//	when
//		$cp : PaaSMetricRanked( 1 == 1 )
//	then
//		$cp.addToRank( $cp.getMetricValue( ) );
//end

rule "SLA"
	when
		$cp : Sla( 1 <= 1 )
	then
		for( Target t : $cp.services.get(0).targets ) {
		  $cp.rank += ( (t.restrictions.total_limit<Double.POSITIVE_INFINITY ? t.restrictions.total_limit : $cp.infinity_value) 
                		+ t.restrictions.total_guaranteed
      	        		+ (t.restrictions.user_limit<Double.POSITIVE_INFINITY ? t.restrictions.user_limit : $cp.infinity_value) 
				+ t.restrictions.user_guaranteed
				+ (t.restrictions.instance_limit<Double.POSITIVE_INFINITY ? t.restrictions.instance_limit : $cp.infinity_value) 
				+ t.restrictions.instance_guaranteed ) * normalization_factor; 
		} 
end
